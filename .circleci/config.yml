# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2  # This indicates a circleci version
jobs:
  build:
    working_directory: ~/app

    # The docker image used which is built with docker engine v18.03.0-ce
    docker:
      - image: docker:18.03.0-ce-git

    steps:
      - checkout
      - setup_remote_docker

      # This prepares required dependencies for the whole deployment process (ex: pip, awscli, etc...)
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache py-pip

            pip install awscli
            pip install docker-compose

            wget -O /usr/local/bin/ecs-cli https://s3.amazonaws.com/amazon-ecs-cli/ecs-cli-linux-amd64-latest
            chmod +x /usr/local/bin/ecs-cli

            ecs-cli configure profile --profile-name devops --access-key $AWS_ACCESS_KEY_ID --secret-key $AWS_SECRET_ACCESS_KEY
            ecs-cli configure --cluster dev-beestock --default-launch-type EC2 --region us-east-2 --config-name dev-beestock


      # This builds docker images using docker-compose.yml under ./infrastructure/development/docker/ directory
      - run:
          name: Build Docker Images Using Docker Compose
          command: docker-compose build
          working_directory: ./infrastructure/development/docker


      - run:
          name: List Docker Images
          command: docker images

      # This will start the process of deployment on AWS ECS as following:
      # NOTES:
      # - $AWS_ACCOUNT_ID is an Environment variable configured on project settings on CircleCI itself
      #   This should be set to continue.
      # - All environment variables such $CLUSTER, $TASK, $FAMILY, $SERVICE, $CONTAINER_NAME, $DOCKER_IMAGE
      #   should match the same configuration done by terraform for building the infrastructure
      # - As configured by Terraform, this will deploy a container image with port 8080 exposed as 8081
      - deploy:
          name: Push Docker Images to AWS ECR
          command: |
            AWS_REGION='us-east-2'
            CLUSTER='dev-beestock'
            TASK='dev-api'
            FAMILY='dev-api'
            SERVICE='api-service'
            CONTAINER_NAME='nginx-server'
            NGINX_DOCKER_IMAGE='docker_nginx-server'
            MONGODB_DOCKER_IMAGE='docker_mongodb'
            IMAGE_MAGICK='docker_image-magick'
            PHP_FPM_DOCKER_IMAGE='docker_php-fpm'

            aws configure set region $AWS_REGION
            $(aws ecr get-login --no-include-email --region $AWS_REGION)

            docker tag $NGINX_DOCKER_IMAGE $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$NGINX_DOCKER_IMAGE:latest
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$NGINX_DOCKER_IMAGE:latest

            docker tag $MONGODB_DOCKER_IMAGE $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$MONGODB_DOCKER_IMAGE:latest
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$MONGODB_DOCKER_IMAGE:latest

            docker tag $IMAGE_MAGICK $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_MAGICK:latest
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_MAGICK:latest

            docker tag $PHP_FPM_DOCKER_IMAGE $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$PHP_FPM_DOCKER_IMAGE:latest
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$PHP_FPM_DOCKER_IMAGE:latest

            docker tag $PHP_FPM_DOCKER_IMAGE $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$PHP_FPM_DOCKER_IMAGE:$CIRCLE_SHA1
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$PHP_FPM_DOCKER_IMAGE:$CIRCLE_SHA1

            ecs-cli compose --file "ecs-docker-compose.yml" --cluster "$CLUSTER" --region "$AWS_REGION" --project-name $TASK up

            aws ecs update-service --force-new-deployment --cluster "$CLUSTER" --service "$SERVICE" --task-definition "$TASK"
            return 0
          working_directory: ./infrastructure/development/docker

#task_template='[
#   {
#     "name": "%s",
#     "image": "%s.dkr.ecr.%s.amazonaws.com/%s:latest",
#     "memory": 128,
#     "essential": true,
#     "portMappings": [
#       {
#         "hostPort": 80,
#         "protocol": "tcp",
#         "containerPort": 80
#       }
#     ],
#     "mountPoints": [
#       {
#         "readOnly": false,
#         "containerPath": "/service",
#         "sourceVolume": "volume-0"
#       },
#       {
#         "readOnly": false,
#         "containerPath": "/etc/nginx/conf.d/default.conf",
#         "sourceVolume": "volume-1"
#       }
#     ],
#     "logConfiguration": {
#       "logDriver": "syslog",
#       "options": {}
#     }
#   },
#   {
#     "name": "php-fpm",
#     "image": "%s.dkr.ecr.%s.amazonaws.com/%s:latest",
#     "memory": 128,
#     "essential": true,
#     "portMappings": [
#       {
#         "hostPort": 9000,
#         "protocol": "tcp",
#         "containerPort": 9000
#       }
#     ],
#     "environment": [
#       {
#         "name": "XDEBUG_CONFIG",
#         "value": "remote_host=192.168.178.139"
#       }
#     ],
#     "mountPoints": [
#       {
#         "readOnly": false,
#         "containerPath": "/service",
#         "sourceVolume": "volume-0"
#       }
#     ],
#     "logConfiguration": {
#       "logDriver": "syslog",
#       "options": {}
#     }
#   },
#   {
#     "name": "image-magick",
#     "image": "%s.dkr.ecr.%s.amazonaws.com/%s:latest",
#     "memory": 128,
#     "essential": true,
#     "logConfiguration": {
#       "logDriver": "syslog",
#       "options": {}
#     }
#   },
#   {
#     "name": "mongodb",
#     "image": "%s.dkr.ecr.%s.amazonaws.com/%s:latest",
#     "memory": 128,
#     "portMappings": [
#       {
#         "hostPort": 27017,
#         "protocol": "tcp",
#         "containerPort": 27017
#       }
#     ],
#     "logConfiguration": {
#       "logDriver": "syslog",
#       "options": {}
#     }
#   }
# ]'
#
#
#task_def=$(printf "$task_template" $CONTAINER_NAME $AWS_ACCOUNT_ID $AWS_REGION $NGINX_DOCKER_IMAGE $AWS_ACCOUNT_ID $AWS_REGION $PHP_FPM_DOCKER_IMAGE $AWS_ACCOUNT_ID $AWS_REGION $IMAGE_MAGICK $AWS_ACCOUNT_ID $AWS_REGION $MONGODB_DOCKER_IMAGE)
#
#json=$(aws ecs register-task-definition --container-definitions "$task_def" --family "$FAMILY")
#
#revision=$(echo "$json" | grep -o '"revision": [0-9]*' | grep -Eo '[0-9]+')